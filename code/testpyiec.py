#!/usr/bin/env python3
"""
ตรวจสอบ pyiec61850 installation และเตรียมสำหรับ PyInstaller
"""

import os
import sys
import glob
from pathlib import Path

def check_pyiec61850():
    """ตรวจสอบ pyiec61850 installation"""
    print("🔍 Checking pyiec61850 installation...")
    
    try:
        import pyiec61850 as iec61850
        print("✅ SUCCESS: iec61850 module can be imported!")
        
        # ตรวจสอบ attributes
        attrs = dir(iec61850)
        print(f"📋 Available attributes: {len(attrs)} items")
        
        # ตรวจสอบ important functions
        important_funcs = [
            'IedConnection_create', 
            'IedConnection_connect',
            'IedConnection_close',
            'ClientDataSet_create'
        ]
        
        found_funcs = []
        for func in important_funcs:
            if func in attrs:
                found_funcs.append(func)
        
        print(f"🔧 Important functions found: {len(found_funcs)}/{len(important_funcs)}")
        for func in found_funcs:
            print(f"   ✓ {func}")
        
        # ตรวจสอบ file location
        if hasattr(iec61850, '__file__'):
            iec_file = iec61850.__file__
            iec_dir = os.path.dirname(iec_file)
            print(f"📁 Module file: {iec_file}")
            print(f"📁 Module directory: {iec_dir}")
            
            # ตรวจหา related files
            print("🔍 Related files in directory:")
            related_files = []
            for pattern in ['*iec61850*', '_iec61850*', '*.pyd', '*.so', '*.dll']:
                files = glob.glob(os.path.join(iec_dir, pattern))
                related_files.extend(files)
            
            for file in set(related_files):
                size = os.path.getsize(file) / 1024  # KB
                print(f"   📄 {os.path.basename(file)} ({size:.1f} KB)")
                
            return iec_dir, related_files
        else:
            print("ℹ️  Module has no __file__ attribute (built-in or C extension)")
            return None, []
            
    except ImportError as e:
        print(f"❌ FAILED: Cannot import iec61850 - {e}")
        print("💡 Please ensure pyiec61850 is built and in PYTHONPATH")
        return None, []

def check_dependencies():
    """ตรวจสอบ dependencies"""
    print("\n🔍 Checking dependencies...")
    
    required_modules = [
        'PyQt6', 'numpy', 'pandas', 'matplotlib', 
        'netifaces', 'scapy', 'pyinstaller'
    ]
    
    missing = []
    for module in required_modules:
        try:
            __import__(module)
            print(f"✅ {module}")
        except ImportError:
            print(f"❌ {module}")
            missing.append(module)
    
    if missing:
        print(f"\n⚠️  Missing modules: {', '.join(missing)}")
        print("💡 Install with: pip install " + " ".join(missing))
    else:
        print("\n🎉 All dependencies available!")

def create_pyinstaller_hook(iec_dir, related_files):
    """สร้าง PyInstaller hook สำหรับ pyiec61850"""
    if not iec_dir:
        return
        
    print("\n🔧 Creating PyInstaller hook...")
    
    hook_content = f'''# PyInstaller hook for pyiec61850
# Auto-generated by check_pyiec61850.py

from PyInstaller.utils.hooks import collect_data_files, collect_dynamic_libs

# Add iec61850 module
hiddenimports = ['iec61850', '_iec61850']

# Add data files
datas = []
binaries = []

# IEC61850 directory: {iec_dir}
'''

    for file in related_files:
        file_name = os.path.basename(file)
        if file.endswith(('.pyd', '.so', '.dll')):
            hook_content += f"binaries.append((r'{file}', '.'))\n"
        else:
            hook_content += f"datas.append((r'{file}', '.'))\n"

    # Write hook file
    with open('hook-iec61850.py', 'w') as f:
        f.write(hook_content)
    
    print("✅ Created: hook-iec61850.py")

def main():
    print("🌟 pyiec61850 Status Checker")
    print("=" * 50)
    
    # Check Python version
    print(f"🐍 Python {sys.version}")
    print(f"📍 Python path: {sys.executable}")
    
    # Check pyiec61850
    iec_dir, related_files = check_pyiec61850()
    
    # Check dependencies
    check_dependencies()
    
    # Create hook if needed
    if iec_dir:
        create_pyinstaller_hook(iec_dir, related_files)
        
        print(f"\n📋 Summary:")
        print(f"   ✅ pyiec61850 location: {iec_dir}")
        print(f"   📄 Related files: {len(related_files)}")
        print(f"   🔧 Hook created: hook-iec61850.py")
        
        print(f"\n🚀 Next steps:")
        print(f"   1. pip install -r requirements_no_pyiec61850.txt")
        print(f"   2. pyinstaller uranus_custom_pyiec.spec")
        print(f"   3. Test: dist/Uranus.exe")
    else:
        print(f"\n❌ pyiec61850 not accessible!")
        print(f"💡 Please check your build and PYTHONPATH")

if __name__ == "__main__":
    main()